{
  "openapi": "3.0.3",
  "info": {
    "title": "AXP-Commerce-Middleware API",
    "version": "1.0.0",
    "contact": {}
  },
  "servers": [
    {
      "url": "https://shop.trimble.com/api/accounts-service/v1"
    },
    {
      "url": "https://shop.trimble.com/api/products-service/v1"
    },
    {
      "url": "https://shop.trimble.com/api/payments-service/v1"
    },
    {
      "url": "https://shop.trimble.com/api/support/v1/api"
    },
    {
      "url": "https://cloud.api.trimble.com/business-systems/axcom-notifications/1.0"
    },
    {
      "url": "https://accounts.trimble.com/api/users-service/v1"
    },
    {
      "url": "https://accounts.trimble.com/api/subscriptions-service/v1"
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "summary": "Get accounts",
        "description": "Get list of accounts for a user",
        "operationId": "getAccounts",
        "tags": [
          "accounts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            },
            "description": "Role of the user in the account (multiple roles allowed with comma separated)"
          },
          {
            "in": "query",
            "name": "sourceSystem",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "A type of Source System (Only single value Eg:- DVW)"
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountObject"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create account",
        "description": "Creates an account in CDH and also in CommerceTools",
        "operationId": "createCommerceAccount",
        "tags": [
          "accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAccountRequestObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountObject"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update account details",
        "description": "Update account data of user",
        "operationId": "UpdateAccountDetails",
        "tags": [
          "accounts"
        ],
        "requestBody": {
          "description": "Update account data of user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountDetailsObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountObject"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/set-default-account": {
      "patch": {
        "summary": "set default account",
        "description": "set default account for a provided uuid",
        "operationId": "setDefaultAccount",
        "tags": [
          "accounts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "responses": {
          "200": {
            "description": "Updates the default account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "success"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}": {
      "get": {
        "summary": "Get account",
        "description": "Get account details",
        "operationId": "getAccountById",
        "tags": [
          "accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountEntityObject"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/address/search": {
      "get": {
        "summary": "Get the matched addresses for given search text",
        "description": "Get the matched addresses",
        "operationId": "searchAddress",
        "tags": [
          "accounts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Country Name / Country Code"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Text for which address search will be performed"
          }
        ],
        "responses": {
          "200": {
            "description": "Address search Results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAddressResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/address/validate": {
      "post": {
        "summary": "Validate address",
        "description": "Validate an address",
        "operationId": "validateAddress",
        "tags": [
          "accounts"
        ],
        "requestBody": {
          "description": "Address to be validated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateAddressRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address validation suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAddressResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/vat": {
      "put": {
        "summary": "Add, Update and Remove VAT for an account",
        "description": "Add, Update and Remove VAT for an account",
        "operationId": "updateVat",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "accounts"
        ],
        "requestBody": {
          "description": "Vat to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VatUpdateRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return success if add/update/remove is successful, otherwise failure result"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMsg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounts/vat/{vatId}/verify": {
      "get": {
        "summary": "Verify VAT",
        "description": "Verify VAT for an account",
        "operationId": "verifyVat",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "vatId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Vat Id"
          },
          {
            "in": "query",
            "name": "countryCode",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Country Code"
          }
        ],
        "tags": [
          "accounts"
        ],
        "responses": {
          "200": {
            "description": "Return True if Vat Id is verified, otherwise false"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMsg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currency": {
      "get": {
        "summary": "Get currency",
        "description": "Get currency code of the country",
        "operationId": "getCurrency",
        "tags": [
          "currency"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ISO country code from geolocation"
          }
        ],
        "responses": {
          "200": {
            "description": "Currency",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/OAuth/revoke": {
      "post": {
        "summary": "Revoke token",
        "description": "This is used to revoke a refresh token in the TID system.",
        "operationId": "RevokeToken",
        "tags": [
          "OAuth"
        ],
        "requestBody": {
          "description": "The request body should contain the refresh token that needs to be revoked in TID.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "The refresh token to be revoked in TID."
                  },
                  "codeVerifier": {
                    "type": "string",
                    "description": "The code verifier used for revoking the TID token."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token revoked successfully"
          }
        }
      }
    },
    "/users/user-info": {
      "get": {
        "summary": "Get user info",
        "description": "Get user information",
        "operationId": "getUserInfo",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "uuid",
            "schema": {
              "type": "string"
            },
            "description": "TID UUID of the user"
          },
          {
            "in": "query",
            "name": "uuids",
            "schema": {
              "type": "string"
            },
            "description": "Comma separated UUIDs of users"
          }
        ],
        "responses": {
          "200": {
            "description": "User info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/account-owners": {
      "get": {
        "summary": "Get account admin users from CDH",
        "description": "Get list of admin users in the account from CDH",
        "operationId": "getAccountAdminUsers",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "Account admin users from CDH",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountUsersObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get account users",
        "description": "Get list of users in the account",
        "operationId": "getAccountUsers",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "Account users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountUsersObject"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add account users",
        "description": "Add one or more users to an account",
        "operationId": "addAccountUsers",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add user to an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/users/roleChange": {
      "post": {
        "summary": "Change user role",
        "description": "Change role for an account user",
        "operationId": "changeUserRole",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserRoleRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change user role to an account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeUserRoleResponseObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/revoke": {
      "post": {
        "summary": "Revoke a user role,",
        "description": "Revoke a role for a user,",
        "operationId": "revokeUserRoles,",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Revoke a user role,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/users/roleTransfer": {
      "post": {
        "summary": "Transfer a user role,",
        "description": "Transfer a role for a user,",
        "operationId": "transferUserRoles,",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleTransferRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tranfer a user role,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/users/roleTransfer/status": {
      "get": {
        "summary": "Get Transactions",
        "description": "Get user transaction details",
        "operationId": "getUserTransactionsById",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "transactionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "TransactionID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User Transaction details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/users/licenses": {
      "get": {
        "summary": "Get user licenses",
        "description": "Get list of licenses for a user",
        "operationId": "getUserLicenses",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "query",
            "name": "sku",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Product SKU"
          }
        ],
        "responses": {
          "200": {
            "description": "User licenses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "licenses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserLicenseObject"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get Account User",
        "description": "Get account user details",
        "operationId": "getAccountUserById",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUserObject"
                }
              }
            }
          }
        }
      }
    },
    "/featureflags": {
      "get": {
        "summary": "Get feature flags",
        "description": "Get list of feature flags",
        "operationId": "getFeatureFlags",
        "tags": [
          "featureflags"
        ],
        "responses": {
          "200": {
            "description": "Feature flags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "feature": {
                        "type": "string",
                        "example": "FeatureA"
                      },
                      "isEnabled": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/featureflags/{flagName}": {
      "get": {
        "summary": "Get feature flag by name",
        "description": "Get the status of a specific feature flag by its name",
        "operationId": "getFeatureFlagByName",
        "tags": [
          "featureflags"
        ],
        "parameters": [
          {
            "name": "flagName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the feature flag"
          }
        ],
        "responses": {
          "200": {
            "description": "Feature flag status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "feature": {
                      "type": "string",
                      "example": "FeatureA"
                    },
                    "isEnabled": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invites/{inviteId}": {
      "delete": {
        "summary": "Cancel invitation",
        "description": "Cancel invitation sent to a user",
        "operationId": "cancelInvitation",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "inviteId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Invitation ID"
          }
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "204": {
            "description": "Cancel invitation sent to a user"
          }
        }
      }
    },
    "/invites/{inviteId}/resend": {
      "post": {
        "summary": "Resend invitation",
        "description": "Resend invitation to a user",
        "operationId": "resendInvitation",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "inviteId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Invitation ID"
          }
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "204": {
            "description": "Invitation resent to the user"
          }
        }
      }
    },
    "/invites/callback": {
      "post": {
        "summary": "Invitation webhook",
        "description": "Post invitation success error response",
        "operationId": "invitationWebhook",
        "tags": [
          "users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationWebhookRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation webhook response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationWebhookResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/user-preferences": {
      "patch": {
        "summary": "Update User Preferences",
        "description": "Update user preferences to exclude expired product SKUs from the \"My Products\" page. This API allows users to specify a list of SKUs they no longer want to be displayed.",
        "operationId": "updateUserPreferences",
        "tags": [
          "users"
        ],
        "requestBody": {
          "description": "JSON object representing various user preferences",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hiddenSkus": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "SKU list to be excluded from the user's my product page."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user preferences in the database."
          }
        }
      }
    },
    "/users/retry": {
      "post": {
        "summary": "Retry based on a previously failed action",
        "description": "Initiates a retry for a failed action based on the previous attempt.",
        "operationId": "retryRoleAssignment",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "users"
        ],
        "requestBody": {
          "description": "JSON object containing user email for retries",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User email for retrying the action."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retry successfully initiated"
          }
        }
      }
    },
    "/users/{uuid}/license/status": {
      "get": {
        "summary": "Check if a user has an active assigned license based on UUID and account ID",
        "description": "Verify if the specified user has an active license assigned in Salesforce using the provided UUID and account ID.",
        "operationId": "CheckUserLicenseStatus",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "uuid",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "user id"
          }
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "The user has a no active subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseStatusCheckResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/users/{uuid}/license/status/v2": {
      "get": {
        "summary": "Check if a user has an active assigned license based on UUID and account ID",
        "description": "Verify if the specified user has an active license assigned in EMSv4 using the provided UUID and account ID.",
        "operationId": "CheckUserLicenseStatusv2",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "uuid",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "user id"
          }
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "The user has a no active subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseStatusCheckResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/admin/role-assignments": {
      "get": {
        "summary": "Get role assignment transactions for an account",
        "description": "Get role assignment transactions for an account",
        "operationId": "getRoleAssignmentTransactions",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "description": "Account users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleAssignmentTransactionObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/license-assignments": {
      "get": {
        "summary": "Get license assignment transactions for an account",
        "description": "Get license assignment transactions for an account",
        "operationId": "getLicenseAssignmentTransactions",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "description": "Account users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicenseAssignmentTransactionObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/migrate/archived-subscriptions": {
      "post": {
        "summary": "Migrate archived subscription",
        "description": "Migrate archived subscription",
        "operationId": "MigrateArchivedSubscription",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "admin"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateArchivedSubscriptionRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Migration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrateArchivedSubscriptionResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/admin/migrate/transactions-status": {
      "post": {
        "summary": "Migrate role license assignment transactions",
        "description": "Migrate role license assignment transactions",
        "operationId": "MigrateTransactionStatus",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "description": "Migration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrateArchivedSubscriptionResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/admin/order-status": {
      "get": {
        "summary": "Get order status for an entitlement identifier",
        "description": "Get order status for an entitlement identifier",
        "operationId": "get-order-status",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "description": "get order status for an entitlement identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetOrderDbStatusByEntitlementIdResponseObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/{productSku}/details": {
      "get": {
        "summary": "Get product details",
        "description": "Get the details for a given product SKU",
        "operationId": "getProductDetails",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "productSku",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "sku for which the details will be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Product Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsObject"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productSku}/price-estimate": {
      "get": {
        "summary": "Get price estimate for given line item",
        "description": "Get price estimate for given line item",
        "operationId": "getPriceEstimate",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "productSku",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "sku for which the price will be returned"
          },
          {
            "in": "query",
            "name": "lineItemType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "NEW_PURCHASE",
                "SUBSEQUENT_PURCHASE",
                "ADD_SEATS",
                "REMOVE_SEATS",
                "FULL_UPGRADE",
                "FULL_DOWNGRADE",
                "CANCEL_SEAT",
                "RENEWAL"
              ],
              "description": "Type of the item for which price to be estimated"
            }
          },
          {
            "in": "query",
            "name": "entitlementId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Id of the entitlement"
          },
          {
            "in": "query",
            "name": "quantity",
            "schema": {
              "type": "string"
            },
            "description": "number of licenses"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Price Estimate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceEstimateObject"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productSku}/price": {
      "get": {
        "summary": "Get price of the product",
        "description": "Get the retail price of given SKU",
        "operationId": "getPrice",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productSku",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "sku for which the price will be returned"
          },
          {
            "in": "query",
            "name": "country",
            "required": true,
            "schema": {
              "type": "string",
              "description": "country for which the price will be returned. Country code compliant to ISO 3166-1 alpha-2"
            }
          },
          {
            "in": "query",
            "name": "currency",
            "required": true,
            "schema": {
              "type": "string",
              "description": "currency for which the price will be returned.Currency code compliant to ISO 4217"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Price",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceObject"
                }
              }
            }
          }
        }
      }
    },
    "/products/info": {
      "get": {
        "summary": "Get Product(s) info",
        "description": "Get information about one or more products",
        "operationId": "getProductInfo",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          },
          {
            "in": "query",
            "name": "skus",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Comma separated sku(s) for which the product information will be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Product Information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInfoObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "Get User's Assigned Products",
        "description": "Retrieve details of all products assigned to a user.",
        "operationId": "getProductDetailsForUser",
        "tags": [
          "products"
        ],
        "responses": {
          "200": {
            "description": "Successful response with user product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyProductsResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/carts": {
      "post": {
        "summary": "Create cart for registered user",
        "description": "Creates cart with the given product skus for authorized user having valid commerce account. If authorized and a valid account id belonging to that user is given, commerce cart will be created. A cart is unique to a user and an account. Cart will not be created if there is no customer with the given user id.",
        "operationId": "createCart",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegisteredCartRequestObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful creation of cart for registered user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartObject"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMsg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get cart details",
        "description": "Get cart details (Authorized user who has valid commerce account) If valid account id belonging to that user is given, the cart belonging to that user and account will be returned. If account id is not given then all the carts belonging to that user will be given.",
        "operationId": "getCarts",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          },
          {
            "in": "header",
            "name": "x-client-source",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Source of the client"
          }
        ],
        "responses": {
          "200": {
            "description": "Get carts for the registerd user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CartObjectWithImageURL"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "patch": {
        "summary": "Update cart",
        "description": "Update the given cart",
        "operationId": "updateCart",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartActionObject"
              },
              "examples": {
                "AddLineItem": {
                  "$ref": "#/components/examples/AddLineItem"
                },
                "ChangeLineItemQuantity": {
                  "$ref": "#/components/examples/ChangeLineItemQuantity"
                },
                "RemoveLineItem": {
                  "$ref": "#/components/examples/RemoveLineItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation of commerce account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartObjectWithImageURL"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMsg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/carts/add-seats": {
      "post": {
        "summary": "Add seats to the cart",
        "description": "If the cart source is AXP, remove items from cart and add items to cart. If the cart source is MXP, delete if cart exists and create a new cart with the given product skus for authorized user having valid commerce account.",
        "operationId": "add-seats-POST",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSeatsRequestObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return success if cart is created, otherwise false"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMsg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/carts/{cartId}": {
      "get": {
        "summary": "Get cart details",
        "description": "Get cart details (For both registered and anonymous use case). Better option would be creating /anonymous api just to make it uniform with create/update apis.Otherwise we have to handle all the corner cases - without authorization or x-account-id user can access only anonymous cart.",
        "operationId": "getCart",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the cart"
          }
        ],
        "responses": {
          "200": {
            "description": "Get cart by cart id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartObjectWithImageURL"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "put": {
        "summary": "Update anonymous cart",
        "description": "Update the given anonymous cart",
        "operationId": "updateAnonymousCart",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the cart"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartActionObject"
              },
              "examples": {
                "AddLineItem": {
                  "$ref": "#/components/examples/AddLineItem"
                },
                "ChangeLineItemQuantity": {
                  "$ref": "#/components/examples/ChangeLineItemQuantity"
                },
                "RemoveLineItem": {
                  "$ref": "#/components/examples/RemoveLineItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation of commerce account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartObject"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/carts/anonymous": {
      "post": {
        "summary": "Create cart for anonymous user",
        "description": "Creates cart with the given product skus for both anonymous user.Cart will be created and assigned to anonymouse user. Anonymouse cart is unique to that anonymous user.",
        "operationId": "createCartAnonymous",
        "tags": [
          "carts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnonymousCartRequestObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful creation of anonymouse cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartObject"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMsg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/carts/merge": {
      "patch": {
        "summary": "Merge anonymous cart to valid user cart",
        "description": "Merge given anonymous cart to current active cart of the valid user. If there is no currect active user cart, anonymous cart will be assigned to user. If currency donot match, then user cart will be returned.",
        "operationId": "mergeAnonymousCart",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeAnonymousCartRequestObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful cart merge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartMergeObject"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMsg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/carts/upgrade": {
      "post": {
        "summary": "Add upgraded product to the cart",
        "description": "If the cart source is AXP, replace items in the cart. If the cart source is MXP, create a new one with the provided product SKU.",
        "operationId": "upgradeProduct",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeProductRequestObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return success if cart is created, otherwise false"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMsg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/carts/partial-upgrade": {
      "post": {
        "summary": "Add paritially upgraded product to the cart",
        "description": "Add the details of the partially upgraded SKU, including license IDs, email addresses, and the quantity required for upgrades for the specified product SKU.",
        "operationId": "partialUpgradeProduct",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpgradeProductRequestObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return success if cart is created, otherwise false"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMsg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/carts/apply-promocodes": {
      "patch": {
        "summary": "Apply the given promocodes to the cart",
        "description": "Add the provided promocodes to the specified cart if they are valid. This operation will validate each promocode and apply the applicable discounts to the cart.",
        "operationId": "applyPromoCodes",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "promoCodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return cart with discount or without based on validation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartObjectWithImageURL"
                }
              }
            }
          }
        }
      }
    },
    "/carts/remove-promocodes": {
      "patch": {
        "summary": "Remove the given promocodes from the cart",
        "description": "Remove the provided promocodes from the cart.",
        "operationId": "removePromoCodes",
        "tags": [
          "carts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "promoCodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return cart after removing the given promo codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartObjectWithImageURL"
                }
              }
            }
          }
        }
      }
    },
    "/provisioning/licenses": {
      "get": {
        "summary": "Get provisioning licenses for an user",
        "description": "Get all provisioning licenses details for the current user",
        "operationId": "provioning-licenses-GET",
        "parameters": [
          {
            "in": "header",
            "name": "x-uuid",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the user"
          }
        ],
        "tags": [
          "provisioning"
        ],
        "responses": {
          "200": {
            "description": "Get provisioning licenses for an user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProvisioningDetailsObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/provisioning/subscriptions": {
      "get": {
        "summary": "Get provisioning subscriptions for an account",
        "description": "Get all provisioning subscriptions details for the current account",
        "operationId": "provioning-subscriptions-GET",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "provisioning"
        ],
        "responses": {
          "200": {
            "description": "Get provisioning subscriptions for an account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProvisioningDetailsObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "summary": "Get archived and unarchived user subscriptions",
        "description": "Get archived and unarchived user subscriptions for the current account",
        "operationId": "getUserSubscriptions",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Get all archived and unarchived subscriptions for an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchivedUnarchivedSubscriptionDetailObject"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}": {
      "get": {
        "summary": "Get user subscriptions",
        "description": "Get user subscriptions for the current account",
        "operationId": "getUserSubscriptionById",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Get subscription by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDetailObject"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/pending-licenses/{entitlementId}": {
      "get": {
        "summary": "Get pending license assignment transactions for an entitlement id",
        "description": "Get pending license assignment transactions for an entitlement id",
        "operationId": "getPendingLicenseAssignmentTransactions",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "entitlement identifier"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Account users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingLicenseAssignmentTransactionObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/v2": {
      "get": {
        "summary": "Get user subscriptions",
        "description": "Get user subscriptions for the current account",
        "operationId": "getUserSubscriptionByIdV2",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Get subscription by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDetailObject"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/archive": {
      "post": {
        "summary": "Archive a subscription",
        "description": "Archive a subscription for the current account",
        "operationId": "archiveSubscriptionById",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Response of archiving a subscription by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/unarchive": {
      "post": {
        "summary": "Unarchive a subscription",
        "description": "Unarchive a subscription for the current account",
        "operationId": "unarchiveSubscriptionById",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Response of unarchiving a subscription by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/archive/v2": {
      "post": {
        "summary": "Archive a subscription",
        "description": "Archive a subscription for the current account",
        "operationId": "archiveSubscriptionByIdv2",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Response of archiving a subscription by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/unarchive/v2": {
      "post": {
        "summary": "Unarchive a subscription",
        "description": "Unarchive a subscription for the current account",
        "operationId": "unarchiveSubscriptionByIdv2",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Response of unarchiving a subscription by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/archived": {
      "get": {
        "summary": "Get all archived user subscriptions",
        "description": "Get all archived user subscriptions for the current account",
        "operationId": "archived-subscriptions-GET",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Get all archived subscriptions for an account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/licenses": {
      "get": {
        "summary": "Get subscription licenses",
        "description": "Get assigned licenses for a subscription",
        "operationId": "getSubscriptionLicenses",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription"
          },
          {
            "in": "query",
            "name": "entitlementId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the entitlementid"
          }
        ],
        "tags": [
          "licenses"
        ],
        "responses": {
          "200": {
            "description": "Get list of assigned licenses for a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalLicenses": {
                      "type": "integer"
                    },
                    "assignedLicenses": {
                      "type": "integer"
                    },
                    "availableLicenses": {
                      "type": "integer"
                    },
                    "licenses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LicenseObject"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Assign subscription licenses",
        "description": "Assigne subscription licenses to users",
        "operationId": "assignSubscriptionLicenses",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription"
          }
        ],
        "tags": [
          "licenses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignLicenseRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assign subscription licenses to users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignLicenseResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/licenses": {
      "post": {
        "summary": "Assign or revoke subscription licenses.",
        "description": "Assign or revoke subscription licenses to users.",
        "operationId": "assignRevokeSubscriptionLicenses",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "licenses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignRevokeLicenseRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assign or revoke subscription licenses to users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignRevokeLicenseResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/licenses/status": {
      "get": {
        "summary": "Get license assignment status",
        "description": "Get license assignment status",
        "operationId": "getSubscriptionLicensesStatus",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "query",
            "name": "transactionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "TransactionId of the license assignment transaction"
          }
        ],
        "tags": [
          "licenses"
        ],
        "responses": {
          "200": {
            "description": "Get status of license assignment transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseStatusResponseObject"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/licenses/fileUpload": {
      "post": {
        "summary": "Upload CSV File",
        "description": "Upload a CSV file and assign licenses",
        "operationId": "fileUploadForBulkLicenseAssignment",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the subscription"
          }
        ],
        "tags": [
          "licenses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AssignBulkLicenseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status of Csv upload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadCsvResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/licenses/revoke": {
      "post": {
        "summary": "Revoke a subscription license",
        "description": "Revoke a license for a subscription",
        "operationId": "revokeSubscriptionLicenses",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription"
          }
        ],
        "tags": [
          "licenses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignLicenseRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Revoke a subscription license",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignLicenseResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/retry": {
      "post": {
        "summary": "Retry based on a previously failed license action",
        "description": "Initiates a retry for a failed license action based on the previous attempt.",
        "operationId": "retryLicenseAssignment",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "requestBody": {
          "description": "JSON object containing user email and subscription id for retries",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User email for retrying the action."
                  },
                  "subscriptionId": {
                    "type": "string",
                    "description": "The subscription identifier."
                  },
                  "provisioningIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "List of provisioning ids for retrying the action."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retry successfully initiated"
          }
        }
      }
    },
    "/subscriptions/users/{uuid}": {
      "get": {
        "summary": "Retrieve subscription licenses by UUID and account ID",
        "description": "This endpoint retrieves the assigned licenses for a user UUID and account ID.",
        "operationId": "getSubscriptionLicensesByUUID",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "uuid of the user"
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of assigned licenses for a user within an account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SingleUserAssignLicenseResponseObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "summary": "Get all invoices for an account",
        "description": "Get all invoices for an account Id",
        "operationId": "getAllInvoices",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "invoices"
        ],
        "responses": {
          "200": {
            "description": "Get list of invoices for an account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/download": {
      "get": {
        "summary": "Download an invoice",
        "description": "Download an invoice given an invoice Id",
        "operationId": "downloadInvoice",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the invoice"
          }
        ],
        "tags": [
          "invoices"
        ],
        "responses": {
          "200": {
            "description": "Get the stream of the document url",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{orderNumber}/downloads": {
      "get": {
        "summary": "Download an invoices",
        "description": "Download an invoice given an OrderNumber and invoice IDs as a single file or zip file",
        "operationId": "downloadInvoices",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "orderNumber",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the orderNumber"
          },
          {
            "in": "query",
            "name": "sourceSystem",
            "schema": {
              "type": "string"
            },
            "description": "sourceSystem for download invoice"
          }
        ],
        "tags": [
          "invoices"
        ],
        "responses": {
          "200": {
            "description": "Get the stream of the document url",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/invoice": {
      "get": {
        "summary": "Get the template data for invoice by orderId",
        "description": "Get the template data for invoice by orderId",
        "operationId": "getInvoiceByOrderId",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "query",
            "name": "orderId",
            "schema": {
              "type": "string"
            },
            "description": "Id of the order"
          }
        ],
        "tags": [
          "invoice"
        ],
        "responses": {
          "200": {
            "description": "Get the template data for invoice by orderId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceTemplateData"
                }
              }
            }
          }
        }
      }
    },
    "/payments": {
      "get": {
        "summary": "Get payment method",
        "description": "Get payment method of account",
        "operationId": "getPaymentMethod",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "payments"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentsResponseObject"
                  }
                },
                "examples": {
                  "Paypal": {
                    "$ref": "#/components/examples/PaypalMethod"
                  },
                  "Card": {
                    "$ref": "#/components/examples/CardMethod"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/cards/sign-fields": {
      "post": {
        "summary": "Signing payment fields to get signature",
        "description": "Sign the payment related fields and get signature to show the cybersource secure acceptance page.",
        "operationId": "getSignFields",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "payments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignFieldsRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get signature of the signed fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignFieldsResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/payments/paypal/init": {
      "post": {
        "operationId": "getInitToken",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "payments"
        ],
        "responses": {
          "200": {
            "description": "Get token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaypalInitResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/payments/paypal/save": {
      "post": {
        "operationId": "savePaypal",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "payments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaypalSaveRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Save Paypal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponseObject"
                },
                "example": {
                  "paymentType": "Paypal",
                  "collectionFailed": false,
                  "data": {
                    "paypalID": "sb-fxomr30360880@business.example.com",
                    "paypalUserName": "John Doe"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/legal-entities": {
      "get": {
        "summary": "Get legal entity related details for the given account",
        "description": "Based on the account registered billing address return the legal entity and payment methods related info for this account",
        "operationId": "getLegalEntity",
        "tags": [
          "payments"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "responses": {
          "200": {
            "description": "Return legal entity along with payment methods related info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntityResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create order by registered cart",
        "description": "Checkout order using user's registered cart",
        "operationId": "createOrder",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseObject"
                },
                "example": {
                  "orderId": "11032024B28B",
                  "status": "Processing"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "PAYMENTS_1000": {
                    "value": {
                      "errorCode": "PAYMENTS_1000",
                      "errorDescription": "Order Creation - Cart not found",
                      "errorData": null
                    }
                  },
                  "PAYMENTS_1001": {
                    "value": {
                      "errorCode": "PAYMENTS_1001",
                      "errorDescription": "Order Creation - Cart tax empty",
                      "errorData": null
                    }
                  },
                  "PAYMENTS_1002": {
                    "value": {
                      "errorCode": "PAYMENTS_1002",
                      "errorDescription": "Order Creation - Customer not found",
                      "errorData": null
                    }
                  },
                  "PAYMENTS_1003": {
                    "value": {
                      "errorCode": "PAYMENTS_1003",
                      "errorDescription": "Order Creation - Aria Account creation failed",
                      "errorData": null
                    }
                  },
                  "PAYMENTS_1004": {
                    "value": {
                      "errorCode": "PAYMENTS_1004",
                      "errorDescription": "Order Creation - Aria Order autherization failed",
                      "errorData": null
                    }
                  },
                  "PAYMENTS_1005": {
                    "value": {
                      "errorCode": "PAYMENTS_1005",
                      "errorDescription": "Order Creation - Order creation failed",
                      "errorData": null
                    }
                  },
                  "PAYMENTS_1006": {
                    "value": {
                      "errorCode": "PAYMENTS_1006",
                      "errorDescription": "Order Creation - CT Order number duplicate",
                      "errorData": null
                    }
                  },
                  "PAYMENTS_1007": {
                    "value": {
                      "errorCode": "PAYMENTS_1007",
                      "errorDescription": "Order Creation - User Consent is required",
                      "errorData": null
                    }
                  },
                  "PAYMENTS_1008": {
                    "value": {
                      "errorCode": "PAYMENTS_1008",
                      "errorDescription": "Order Creation - Cart is empty",
                      "errorData": null
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get order details",
        "description": "Get all the orders mapped to the corresponding account id",
        "operationId": "getOrderByAccountId",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "responses": {
          "200": {
            "description": "Get orders for the registerd user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetOrdersByAccountIdResponseObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/order-status": {
      "get": {
        "summary": "Get order db status",
        "description": "Get order details from database",
        "operationId": "getOrderDbStatusByEntitlementId",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "entitlementId",
            "schema": {
              "type": "string"
            },
            "description": "The entitlement Id"
          },
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "responses": {
          "200": {
            "description": "Get order db status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetOrderDbStatusByEntitlementIdResponseObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/staged-orders": {
      "get": {
        "summary": "Get staged orders from database",
        "description": "Get staged orders from database",
        "operationId": "getStagedOrders",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "responses": {
          "200": {
            "description": "Get staged orders from db",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetStagedOrdersResponseObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/staged-order": {
      "get": {
        "summary": "Get staged order by entitlement ID",
        "description": "Get a staged order from the database by entitlement ID",
        "operationId": "getStagedOrderByEntitlementId",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          },
          {
            "in": "query",
            "name": "entitlementId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The entitlement ID to fetch the staged order"
          }
        ],
        "responses": {
          "200": {
            "description": "Get staged order from the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStagedOrdersResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/orders/cancel": {
      "post": {
        "summary": "Initiate the cancellation of a DVW subscription",
        "description": "Initiate the cancellation of a DVW subscription based on entitlementId",
        "operationId": "cancel-subscription-POST",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSubscriptionRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return success if cancel subscription is initiated, otherwise false"
          }
        }
      }
    },
    "/orders/partial-cancel": {
      "post": {
        "summary": "Initiate the partial cancellation of a DVW subscription",
        "description": "Initiate the partial cancellation of a DVW subscription based on entitlementId",
        "operationId": "partial-cancel-subscription-POST",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialCancelSubscriptionRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return success if partial cancel subscription is initiated, otherwise false"
          }
        }
      },
      "patch": {
        "summary": "Patching the partial cancellation of a DVW subscription",
        "description": "Patching the partial cancellation of a DVW subscription based on entitlementId",
        "operationId": "patch-partial-cancel-subscription-POST",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPartialCancelSubscriptionRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return success if patching partial cancel subscription is initiated, otherwise false"
          }
        }
      }
    },
    "/orders/reactivate": {
      "post": {
        "summary": "Reactivate the cancelled DVW subscription",
        "description": "Reactivate the cancelled DVW subscription based on entitlementId",
        "operationId": "reactivate-subscription-POST",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactivateSubscriptionRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return success if cancelled subscription is reactivated, otherwise false"
          }
        }
      }
    },
    "/orders/cancel-partial-cancel": {
      "post": {
        "summary": "Cancel the partial cancellation of a DVW subscription",
        "description": "Cancel the partial cancellation of a DVW subscription based on entitlementId",
        "operationId": "cancel-partial-cancellation-POST",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactivateSubscriptionRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return success if partial cancellation is reactivated, otherwise false"
          }
        }
      }
    },
    "/orders/downgrade": {
      "post": {
        "summary": "Initiate the downgrade of a DVW subscription",
        "description": "Initiate the downgrade of a DVW subscription based on entitlementId",
        "operationId": "downgrade-subscription-POST",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DowngradeSubscriptionRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return success if downgrade subscription is initiated, otherwise false"
          }
        }
      }
    },
    "/orders/cancel-downgrade": {
      "post": {
        "summary": "Cancel the downgrade DVW subscription",
        "description": "Cancel the downgrade DVW subscription based on entitlementId",
        "operationId": "cancel-downgrade-POST",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelDowngradeSubscriptionRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return success if downgrade subscription is cancelled, otherwise false"
          }
        }
      }
    },
    "/orders/orders-history": {
      "get": {
        "summary": "Get order history details",
        "description": "Get order history details from salesforce",
        "operationId": "getOrderHistoryByAccountId",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "responses": {
          "200": {
            "description": "Get order history details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetOrderHistoryResponseObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/return": {
      "post": {
        "summary": "Issue refund",
        "description": "Issue refund for a specific order, line items",
        "operationId": "issueRefund",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "orderId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the order"
          },
          {
            "in": "query",
            "name": "skipIssueRefund",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "To skip issue refund or not"
          }
        ],
        "tags": [
          "Order Support"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderReturnRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return success if the refund was issued",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "success"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/retry": {
      "post": {
        "summary": "Retry the failed Order",
        "description": "Retry order processing for the failed order based on orderId",
        "operationId": "order-retry-processing-POST",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "orderId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "order identifier"
          }
        ],
        "tags": [
          "Order Support"
        ],
        "responses": {
          "200": {
            "description": "Return success if retry order processing succeeds, otherwise false"
          }
        }
      }
    },
    "/support/role-assignment": {
      "post": {
        "summary": "Add account users",
        "description": "Add one or more users to an account",
        "operationId": "supportRoleAssignment",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          }
        ],
        "tags": [
          "support"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add user to an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/notifications": {
      "post": {
        "summary": "Send notification",
        "description": "Send notification to the user",
        "operationId": "sendNotification",
        "tags": [
          "notifications"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendNotificationRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendNotificationResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/support/role-transfer": {
      "post": {
        "summary": "Transfer a user role,",
        "description": "Transfer a role for a user,",
        "operationId": "supportRoleTransfer,",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "header",
            "name": "x-uuid",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "UUID of the existing account owner"
          }
        ],
        "tags": [
          "support"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleTransferRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tranfer a user role,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/support/license-assignment/{subscriptionId}": {
      "post": {
        "summary": "Assign subscription licenses",
        "description": "Assigne subscription licenses to users",
        "operationId": "supportLicenseAssignment",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription / Asset Id"
          }
        ],
        "tags": [
          "support"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignLicenseRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assign subscription licenses to users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignLicenseResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/support/middleware/license-assignment/{subscriptionId}": {
      "post": {
        "summary": "Assign subscription licenses for middleware",
        "description": "Assigne subscription licenses to users",
        "operationId": "supportMiddlewareLicenseAssignment",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription / Asset Id"
          }
        ],
        "tags": [
          "support"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportMiddlewareAssignLicenseRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Support middleware assign subscription licenses to users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignLicenseResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/support/license-revoke/{subscriptionId}": {
      "post": {
        "summary": "Revoke subscription licenses",
        "description": "Revoke subscription licenses to users",
        "operationId": "supportLicenseRevoke",
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the subscription / Asset Id"
          }
        ],
        "tags": [
          "support"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeLicenseRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assign subscription licenses to users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeLicenseResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/support/archive": {
      "post": {
        "summary": "Archive Transactions",
        "description": "Archive Role and License assignment transactions",
        "operationId": "supportArchiveTransactions",
        "tags": [
          "support"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveTransactionsObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assign subscription licenses to users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchiveTransactionsResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/d-country-release": {
      "post": {
        "summary": "Change Order Status",
        "description": "Change the order status from dcountry hold to dcountry release. The further status is defined by compliance check.",
        "operationId": "d-country-release-POST",
        "tags": [
          "Order Support"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "orderId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Return current order status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DCountryReleaseResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/status": {
      "get": {
        "summary": "Get Order details about OrderId",
        "description": "Retrieve detailed information for the specified OrderId.",
        "operationId": "GetOrderStatus",
        "tags": [
          "Order Support"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "orderId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Return current order status with order details and order line items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderStatusResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/cancel": {
      "post": {
        "summary": "Cancel the order with status Compliance Hold",
        "description": "Cancels the Hold order and updates the order with status Hold to status Cancelled",
        "operationId": "CancelOrder",
        "tags": [
          "Order Support"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          },
          {
            "in": "path",
            "name": "orderId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if order is cancelled successfully"
          }
        }
      }
    },
    "/contracts/activate": {
      "post": {
        "summary": "Activate Contract",
        "description": "Activate Contract",
        "operationId": "ActivateContract",
        "tags": [
          "Contracts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateContractRequestObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Activate Contract",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivateContractResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/contracts/unactivated": {
      "get": {
        "summary": "Get Unactivated Contracts",
        "description": "Get Unactivated Contracts",
        "operationId": "GetUnactivatedContracts",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-account-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the account"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Unactivated Contracts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnactivatedContractsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/terms-of-service/{type}": {
      "get": {
        "summary": "Get Terms of Service",
        "description": "Get Terms of Service",
        "operationId": "terms-of-service-GET",
        "tags": [
          "termsOfService"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Type of the terms of service"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Terms of Service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTermsOfServiceResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "examples": {
      "AddLineItem": {
        "value": {
          "updateAction": "ADD_CART_LINEITEM",
          "productSku": "SKP-GO",
          "quantity": 2
        }
      },
      "ChangeLineItemQuantity": {
        "value": {
          "productSku": "SKP-GO",
          "updateAction": "UPDATE_CART_LINEITEM",
          "lineitemId": "55085b10-01af-4292-afe5-3e8805c3f8a4",
          "quantity": 2
        }
      },
      "RemoveLineItem": {
        "value": {
          "updateAction": "REMOVE_CART_LINEITEM",
          "lineitemId": "55085b10-01af-4292-afe5-3e8805c3f8a4"
        }
      },
      "PaypalMethod": {
        "value": {
          "paymentType": "Paypal",
          "collectionFailed": false,
          "data": {
            "paypalId": "sb-fxomr30360880@business.example.com",
            "paypalUserName": "John Doe"
          }
        }
      },
      "CardMethod": {
        "value": {
          "paymentType": "Card",
          "collectionFailed": false,
          "data": {
            "token": "9503705000066818",
            "lastFourDigits": "1111",
            "expiry": "02-2031",
            "cardType": "002"
          }
        }
      }
    },
    "schemas": {
      "AccountObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ACCOUNT_OWNER",
              "SECONDARY_ACCOUNT_OWNER",
              "COMPANY_ADMIN",
              "PRODUCT_USER",
              "TEAM_MANAGER"
            ]
          },
          "isDefaultAccount": {
            "type": "boolean"
          },
          "address": {
            "type": "object",
            "properties": {
              "addressLine1": {
                "type": "string"
              },
              "addressLine2": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "stateName": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "countryName": {
                "type": "string"
              },
              "zip": {
                "type": "string"
              }
            }
          },
          "sourceSystems": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DVW",
                "TDX",
                "TrialsService"
              ]
            }
          },
          "originalSourceSystem": {
            "type": "string",
            "description": "This field is available only for AXP. Commerce will implement this field later."
          },
          "accountType": {
            "type": "string",
            "enum": [
              "Organization",
              "Individual"
            ]
          },
          "taxExemptionStatus": {
            "type": "string",
            "enum": [
              "TAX_EXEMPTED",
              "VAT_EXEMPTED",
              "NO_EXEMPTION"
            ]
          },
          "vatId": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "description": "Account currency"
          },
          "phoneNumber": {
            "type": "string"
          }
        }
      },
      "AccountEntityObject": {
        "type": "object",
        "properties": {
          "AccountID": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "EEUCStatus": {
            "type": "string",
            "enum": [
              "NOT_APPLICABLE",
              "APPROVED",
              "HOLD",
              "CANCELLED"
            ]
          },
          "TaxExemption": {
            "type": "string",
            "enum": [
              "NO_EXEMPTION",
              "VAT_EXEMPTED",
              "US_TAX_EXEMPTION_REQUESTED",
              "US_TAX_EXEMPTION_APPROVED",
              "US_TAX_EXEMPTION_CANCELLED"
            ]
          },
          "EEUCApprovalDate": {
            "type": "string"
          },
          "EEUCExpirationDate": {
            "type": "string"
          },
          "VATID": {
            "type": "string"
          },
          "HaveConsentForMarketing": {
            "type": "boolean"
          },
          "Created": {
            "type": "string"
          },
          "LastModified": {
            "type": "string"
          }
        }
      },
      "VatUpdateRequestObject": {
        "type": "object",
        "properties": {
          "TaxExemptionStatus": {
            "type": "string",
            "enum": [
              "TAX_EXEMPTED",
              "VAT_EXEMPTED",
              "NO_EXEMPTION"
            ]
          },
          "vatId": {
            "type": "string"
          }
        }
      },
      "ValidateAddressRequestObject": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "county": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          }
        }
      },
      "ValidateAddressResponseObject": {
        "type": "object",
        "properties": {
          "suggestions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "addressLine1": {
                  "type": "string"
                },
                "addressLine2": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "county": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "stateCode": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "countryCode": {
                  "type": "string"
                },
                "postalCode": {
                  "type": "string"
                },
                "MatchPercentage": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BusinessInfoObject": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string"
          },
          "companySize": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "taxExemptionStatus": {
            "type": "string",
            "enum": [
              "TAX_EXEMPTED",
              "VAT_EXEMPTED",
              "NO_EXEMPTION"
            ]
          },
          "vatId": {
            "type": "string"
          }
        }
      },
      "AddressObject": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "stateName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        }
      },
      "UpdateAccountDetailsObject": {
        "type": "object",
        "properties": {
          "actionType": {
            "type": "string",
            "enum": [
              "BillToAddressEdit",
              "AccountProvision"
            ]
          },
          "user": {
            "type": "object",
            "properties": {
              "phoneNumber": {
                "type": "string"
              }
            }
          },
          "accountType": {
            "type": "string",
            "enum": [
              "Organization",
              "Individual"
            ]
          },
          "businessInfo": {
            "$ref": "#/components/schemas/BusinessInfoObject"
          },
          "address": {
            "$ref": "#/components/schemas/AddressObject"
          },
          "marketingConsent": {
            "type": "boolean",
            "default": false
          },
          "currency": {
            "type": "string",
            "description": "Account currency"
          }
        }
      },
      "AssignBulkLicenseRequestObject": {
        "type": "object",
        "properties": {
          "AssignBulkLicenseRequest": {
            "$ref": "#/components/schemas/AssignBulkLicenseRequest"
          },
          "SubscriptionId": {
            "type": "string"
          }
        }
      },
      "AssignBulkLicenseRequest": {
        "type": "object",
        "properties": {
          "File": {
            "type": "object"
          },
          "ProvisioningIds": {
            "type": "string"
          }
        }
      },
      "UploadCsvResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "AddAccountRequestObject": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "phoneNumber": {
                "type": "string"
              }
            }
          },
          "accountType": {
            "type": "string",
            "enum": [
              "Organization",
              "Individual"
            ]
          },
          "businessInfo": {
            "$ref": "#/components/schemas/BusinessInfoObject"
          },
          "address": {
            "$ref": "#/components/schemas/AddressObject"
          },
          "marketingConsent": {
            "type": "boolean",
            "default": false
          },
          "currency": {
            "type": "string",
            "description": "Account currency"
          }
        }
      },
      "UserObject": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "thumbnailUrl": {
            "type": "string"
          }
        }
      },
      "AccountUserObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserObject"
          },
          {
            "type": "object",
            "properties": {
              "roles": {
                "type": "string",
                "enum": [
                  "TCP_ACCOUNT_OWNER",
                  "TCP_SECONDARY_ACCOUNT_OWNER",
                  "TCP_COMPANY_ADMIN",
                  "TCP_END_USER",
                  "TCP_TEAM_MANAGER"
                ]
              },
              "status": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "PENDING",
                  "PROCESSING",
                  "EXPIRED",
                  "ERROR"
                ]
              },
              "error": {
                "type": "string",
                "default": null
              }
            }
          }
        ]
      },
      "AccountUsersObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserObject"
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "PENDING",
                  "PROCESSING",
                  "EXPIRED",
                  "ERROR"
                ]
              },
              "error": {
                "type": "string",
                "default": null
              },
              "inviteId": {
                "type": "string",
                "default": null
              },
              "retries": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "RoleAssignmentTransactionObject": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "TCP_ACCOUNT_OWNER",
              "TCP_SECONDARY_ACCOUNT_OWNER",
              "TCP_COMPANY_ADMIN",
              "TCP_END_USER",
              "TCP_TEAM_MANAGER"
            ]
          },
          "action": {
            "type": "string",
            "enum": [
              "Assign",
              "Revoke",
              "Transfer",
              "Change"
            ]
          },
          "uuid": {
            "type": "string"
          },
          "isNewUser": {
            "type": "string"
          },
          "invitationId": {
            "type": "string"
          },
          "retryCount": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PENDING",
              "PROCESSING",
              "EXPIRED",
              "ERROR",
              "REMOVED"
            ]
          },
          "dxStatus": {
            "type": "string",
            "enum": [
              "NONE",
              "PROCESSING",
              "UPDATED",
              "ERROR"
            ]
          },
          "error": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "LicenseAssignmentTransactionObject": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "TCP_ACCOUNT_OWNER",
              "TCP_SECONDARY_ACCOUNT_OWNER",
              "TCP_COMPANY_ADMIN",
              "TCP_END_USER",
              "TCP_TEAM_MANAGER"
            ]
          },
          "action": {
            "type": "string",
            "enum": [
              "Assign",
              "Revoke",
              "Transfer",
              "Change"
            ]
          },
          "uuid": {
            "type": "string"
          },
          "isNewUser": {
            "type": "string"
          },
          "retryCount": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PENDING",
              "PROCESSING",
              "EXPIRED",
              "ERROR",
              "REMOVED"
            ]
          },
          "dxStatus": {
            "type": "string",
            "enum": [
              "NONE",
              "PROCESSING",
              "UPDATED",
              "ERROR"
            ]
          },
          "invitationId": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "salesforceReferenceId": {
                  "type": "string"
                },
                "subTransactionId": {
                  "type": "string"
                },
                "sku": {
                  "type": "string"
                },
                "entitlementId": {
                  "type": "string"
                },
                "licenseId": {
                  "type": "string"
                }
              }
            }
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "PendingLicenseAssignmentTransactionObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "thumbnailUrl": {
                "type": "string"
              }
            }
          },
          "error": {
            "type": "string"
          },
          "inviteId": {
            "type": "string"
          },
          "retries": {
            "type": "integer"
          }
        }
      },
      "AddUserRequestObject": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "role": {
            "type": "string",
            "enum": [
              "TCP_ACCOUNT_OWNER",
              "TCP_SECONDARY_ACCOUNT_OWNER",
              "TCP_COMPANY_ADMIN",
              "TCP_END_USER",
              "TCP_TEAM_MANAGER"
            ]
          },
          "externalReferenceId": {
            "type": "string",
            "description": "Optional external reference ID for the operation"
          },
          "customAttributes": {
            "type": "object",
            "description": "Optional customAttributes for the operation"
          }
        }
      },
      "UserResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "default": null
          }
        }
      },
      "DCountryReleaseResponseObject": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "GetOrderStatusResponseObject": {
        "type": "object",
        "properties": {
          "orderLineItems": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accountID": {
                  "type": "string"
                },
                "orderId": {
                  "type": "string"
                },
                "sku": {
                  "type": "string"
                },
                "quantity": {
                  "type": "integer"
                },
                "type": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "subscriptionType": {
                  "type": "string"
                },
                "assignLicenseToMe": {
                  "type": "boolean"
                },
                "unitPrice": {
                  "type": "number"
                },
                "totalPrice": {
                  "type": "number"
                },
                "planInstanceId": {
                  "type": "string"
                },
                "currentEntitlementId": {
                  "type": "string"
                },
                "newEntitlementId": {
                  "type": "string"
                },
                "entitlementJobId": {
                  "type": "string"
                },
                "assetId": {
                  "type": "string"
                },
                "ctOrderLineItemId": {
                  "type": "string"
                },
                "entitlementStartDate": {
                  "type": "string"
                },
                "entitlementEndDate": {
                  "type": "string"
                },
                "oldSku": {
                  "type": "string"
                },
                "oldQuantity": {
                  "type": "integer"
                },
                "licenseId": {
                  "type": "string"
                },
                "planStartDate": {
                  "type": "string"
                },
                "planEndDate": {
                  "type": "string"
                },
                "totalTax": {
                  "type": "number"
                },
                "taxRate": {
                  "type": "number"
                },
                "sfOrderProductIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "created": {
                  "type": "string"
                },
                "lastModified": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "email": {
            "type": "string"
          },
          "orderStatus": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "accountID": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "ariaAccountNo": {
            "type": "string"
          },
          "dxOrderStatus": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string"
          },
          "orderType": {
            "type": "string"
          },
          "totalGross": {
            "type": "number"
          },
          "totalNet": {
            "type": "number"
          },
          "authorizationId": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "invoiceNo": {
            "type": "string"
          },
          "sfOrderId": {
            "type": "string"
          },
          "dxInvoiceStatus": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "lastModified": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "SendNotificationRequestObject": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "notificationType": {
            "type": "string",
            "enum": [
              "ORDER_PROCESSING_SUCCESS",
              "ORDER_SUBSCRIPTION_ADDED"
            ]
          },
          "uuid": {
            "type": "string"
          },
          "toEmailUuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "toEmail": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sourceReference": {
            "type": "string"
          },
          "locale": {
            "type": "string",
            "default": "en-US"
          },
          "payload": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrderProcessingSuccessPayload"
              },
              {
                "$ref": "#/components/schemas/OrderSubscriptionAddedPayload"
              },
              {
                "type": "object"
              }
            ]
          }
        }
      },
      "OrderProcessingSuccessPayload": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "TableData": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "row1": {
                  "type": "string"
                }
              }
            }
          },
          "LinkToMyAccount": {
            "type": "string"
          }
        }
      },
      "OrderSubscriptionAddedPayload": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "TableData": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "row1": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SendNotificationResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "notificationId": {
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "EMAIL_SENT",
              "FAILED"
            ]
          }
        }
      },
      "TransactionResponseObject": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "default": null
          },
          "accountName": {
            "type": "string"
          },
          "accountOwnerName": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "actionType": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "entitlementId": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "externalReferenceId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "invitationId": {
            "type": "string"
          },
          "isNewUser": {
            "type": "boolean"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "lastName": {
            "type": "string"
          },
          "retryCount": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "updatedByEmail": {
            "type": "string"
          },
          "updatedByName": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "RoleTransferRequestObject": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "externalReferenceId": {
            "type": "string",
            "description": "Optional external reference ID for the operation"
          },
          "customAttributes": {
            "type": "object",
            "description": "Optional customAttributes for the operation"
          }
        }
      },
      "CancelSubscriptionRequestObject": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string"
          },
          "feedback": {
            "type": "string"
          }
        }
      },
      "PartialCancelSubscriptionRequestObject": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string"
          },
          "quantityToRemove": {
            "type": "integer"
          },
          "emailIdsToRemove": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "licenseIdsToRemove": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchPartialCancelSubscriptionRequestObject": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string"
          },
          "quantityToUpdate": {
            "type": "integer"
          },
          "emailIdsToRemove": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "licenseIdsToRemove": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReactivateSubscriptionRequestObject": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string"
          }
        }
      },
      "DowngradeSubscriptionRequestObject": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string"
          },
          "toDowngradeSku": {
            "type": "string"
          }
        }
      },
      "CancelDowngradeSubscriptionRequestObject": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string"
          }
        }
      },
      "OrderReturnRequestObject": {
        "type": "object",
        "properties": {
          "toBeReturnedLineItems": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "returnType": {
            "type": "string"
          }
        }
      },
      "RemoveUserRequestObject": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
            },
            "role": {
              "type": "string",
              "enum": [
                "TCP_ACCOUNT_OWNER",
                "TCP_SECONDARY_ACCOUNT_OWNER",
                "TCP_COMPANY_ADMIN",
                "TCP_END_USER",
                "TCP_TEAM_MANAGER"
              ]
            }
          }
        }
      },
      "ChangeUserRoleRequestObject": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "TCP_SECONDARY_ACCOUNT_OWNER",
              "TCP_COMPANY_ADMIN",
              "TCP_END_USER",
              "TCP_TEAM_MANAGER"
            ]
          }
        }
      },
      "ChangeUserRoleResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "default": null
          }
        }
      },
      "UpdateInviteRequestObject": {
        "type": "object"
      },
      "CreateRegisteredCartRequestObject": {
        "type": "object",
        "properties": {
          "lineItems": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sku": {
                  "type": "string"
                },
                "quantity": {
                  "type": "number",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "CreateAnonymousCartRequestObject": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "lineItems": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sku": {
                  "type": "string"
                },
                "quantity": {
                  "type": "number",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AddSeatsRequestObject": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          }
        }
      },
      "MergeAnonymousCartRequestObject": {
        "type": "object",
        "properties": {
          "anonymousCartId": {
            "type": "string"
          }
        }
      },
      "CartObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartLineItemObject"
            }
          },
          "totalNet": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalGross": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalLineItemQuantity": {
            "type": "number",
            "default": 1
          },
          "totalTax": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalProrationDeduction": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "prorationEndDate": {
            "type": "string"
          },
          "cartVersion": {
            "type": "number"
          }
        }
      },
      "CartObjectWithImageURL": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartLineItemObjectWithImageURL"
            }
          },
          "totalNet": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalGross": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalLineItemQuantity": {
            "type": "number",
            "default": 1
          },
          "totalTax": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalProrationDeduction": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalDiscount": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "NonApplicablePromoCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prorationEndDate": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "enum": [
              "AXP",
              "MXP",
              "ARIA"
            ]
          },
          "cartVersion": {
            "type": "number"
          }
        }
      },
      "UpdateCartActionObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "default": 1
          },
          "price": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "updateAction": {
            "type": "string",
            "enum": [
              "ADD_LINEITEM",
              "UPDATE_LINEITEM_QUANTITY",
              "REMOVE_LINE_ITEM"
            ]
          }
        }
      },
      "CartLineItemObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "entitlementId": {
            "type": "string"
          },
          "LineItemtype": {
            "type": "string",
            "enum": [
              "NEW_PURCHASE",
              "SUBSEQUENT_PURCHASE",
              "ADD_SEATS",
              "REMOVE_SEATS",
              "FULL_UPGRADE",
              "FULL_DOWNGRADE",
              "CANCEL_SEAT",
              "RENEWAL"
            ]
          },
          "quantity": {
            "type": "number",
            "default": 1
          },
          "price": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalPriceAfterProrationDeduction": {
            "$ref": "#/components/schemas/PriceObject"
          }
        }
      },
      "CartLineItemObjectWithImageURL": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "entitlementId": {
            "type": "string"
          },
          "oldSku": {
            "type": "string"
          },
          "LineItemtype": {
            "type": "string",
            "enum": [
              "NEW_PURCHASE",
              "SUBSEQUENT_PURCHASE",
              "ADD_SEATS",
              "REMOVE_SEATS",
              "FULL_UPGRADE",
              "FULL_DOWNGRADE",
              "CANCEL_SEAT",
              "RENEWAL"
            ]
          },
          "name": {
            "type": "string"
          },
          "imageURL": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "default": 1
          },
          "price": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalPriceAfterProrationDeduction": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "promoCodeInfo": {
            "$ref": "#/components/schemas/PromoObject"
          }
        }
      },
      "PriceObject": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "default": 1
          }
        }
      },
      "PromoObject": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "promocode": {
              "type": "string"
            },
            "discount": {
              "$ref": "#/components/schemas/PriceObject"
            }
          }
        }
      },
      "PriceEstimateObject": {
        "type": "object",
        "properties": {
          "totalPrice": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "unitPrice": {
            "$ref": "#/components/schemas/PriceObject"
          }
        }
      },
      "ProductDetailsObject": {
        "type": "object",
        "properties": {
          "currentProduct": {
            "$ref": "#/components/schemas/ProductDetailObject"
          },
          "upgradableProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDetailObject"
            }
          },
          "downgradeableProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDetailObject"
            }
          },
          "quantityThreshold": {
            "type": "number",
            "default": 1
          },
          "unitOfMeasure": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "ANNUALLY"
            ]
          }
        }
      },
      "ProductDetailObject": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "includedApplications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpgradeProductRequestObject": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string"
          },
          "upgradeableSku": {
            "type": "string"
          }
        }
      },
      "PartialUpgradeProductRequestObject": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string"
          },
          "upgradeableSku": {
            "type": "string"
          },
          "quantityToUpgrade": {
            "type": "integer"
          },
          "emailIdsToUpgrade": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "licenseIdsToUpgrade": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CartActionObject": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "default": 1
          }
        }
      },
      "ProductInfoObject": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string"
          },
          "productSku": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "downloadLinks": {
            "type": "object",
            "properties": {
              "windows": {
                "type": "string"
              },
              "mac": {
                "type": "string"
              }
            }
          },
          "launchLinks": {
            "type": "object",
            "properties": {
              "windows": {
                "type": "string"
              },
              "mac": {
                "type": "string"
              }
            }
          },
          "learnLink": {
            "type": "string"
          },
          "legacyPortal": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string"
              },
              "link": {
                "type": "string"
              }
            }
          },
          "legacySupport": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string"
              },
              "link": {
                "type": "string"
              }
            }
          }
        }
      },
      "MyProductsResponseObject": {
        "type": "object",
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The identifier of the parent product."
                },
                "name": {
                  "type": "string",
                  "description": "The parent prodcut name."
                },
                "accountId": {
                  "type": "string",
                  "description": "The subscription below to which account."
                },
                "accountName": {
                  "type": "string",
                  "description": "The subscription below to which account name."
                },
                "sku": {
                  "type": "string",
                  "description": "The stock keeping unit (SKU) of the parent product."
                },
                "startDate": {
                  "type": "string",
                  "description": "Start date of the parent prodcut."
                },
                "endDate": {
                  "type": "string",
                  "description": "End date of the parent prodcut."
                },
                "provisioningMethod": {
                  "type": "string",
                  "description": "Provisioning method type of parent prodcut."
                },
                "doNotAutoRenew": {
                  "type": "string",
                  "description": "Do not auto renew of parent prodcut."
                },
                "solutionName": {
                  "type": "string",
                  "description": "Solution name of parent prodcut."
                },
                "applications": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The identifier of the parent application."
                      },
                      "name": {
                        "type": "string",
                        "description": "The application name."
                      },
                      "sku": {
                        "type": "string",
                        "description": "The stock keeping unit (SKU) of the parent application."
                      }
                    }
                  }
                },
                "products": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The identifier of the child product."
                      },
                      "name": {
                        "type": "string",
                        "description": "The child prodcut name."
                      },
                      "sku": {
                        "type": "string",
                        "description": "The stock keeping unit (SKU) of the child product."
                      },
                      "startDate": {
                        "type": "string",
                        "description": "Start date of the child prodcut."
                      },
                      "endDate": {
                        "type": "string",
                        "description": "End date of the child prodcut."
                      },
                      "provisioningMethod": {
                        "type": "string",
                        "description": "Provisioning method type of child prodcut."
                      },
                      "doNotAutoRenew": {
                        "type": "string",
                        "description": "Do not auto renew of child prodcut."
                      },
                      "solutionName": {
                        "type": "string",
                        "description": "Solution name of child prodcut."
                      },
                      "applications": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The identifier of the application."
                            },
                            "name": {
                              "type": "string",
                              "description": "The application name."
                            },
                            "sku": {
                              "type": "string",
                              "description": "The stock keeping unit (SKU) of the application."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "hiddenSkus": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "List of SKUs removed by the user with expired subscriptions."
            }
          }
        }
      },
      "SubscriptionObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRING",
              "EXPIRED",
              "CANCELLED"
            ]
          },
          "donotAutorenew": {
            "type": "boolean"
          },
          "renewalDate": {
            "type": "string"
          },
          "totalLicenses": {
            "type": "integer"
          },
          "assignedLicenses": {
            "type": "integer"
          },
          "availableLicenses": {
            "type": "integer"
          },
          "source": {
            "type": "string"
          },
          "groupedSubscriptions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "sku": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "ACTIVE",
                    "EXPIRING",
                    "EXPIRED",
                    "CANCELLED"
                  ]
                },
                "donotAutorenew": {
                  "type": "boolean"
                },
                "renewalDate": {
                  "type": "string"
                },
                "totalLicenses": {
                  "type": "integer"
                },
                "assignedLicenses": {
                  "type": "integer"
                },
                "availableLicenses": {
                  "type": "integer"
                },
                "source": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ArchivedUnarchivedSubscriptionDetailObject": {
        "type": "object",
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionObject"
            }
          },
          "archivedSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionObject"
            }
          }
        }
      },
      "SubscriptionDetailObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRING",
              "EXPIRED",
              "CANCELLED"
            ]
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionProductObject"
            }
          },
          "donotAutorenew": {
            "type": "boolean"
          },
          "renewalDate": {
            "type": "string"
          },
          "totalLicenses": {
            "type": "integer"
          },
          "assignedLicenses": {
            "type": "integer"
          },
          "availableLicenses": {
            "type": "integer"
          },
          "source": {
            "type": "string"
          },
          "entitlementStatus": {
            "type": "string"
          }
        }
      },
      "SubscriptionResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "SubscriptionProductObject": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "provisioningId": {
            "type": "string"
          },
          "provisioningSystem": {
            "type": "string",
            "enum": [
              "EMSv4",
              "LEGACY",
              "MANUAL"
            ]
          },
          "isChildProduct": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "LicenseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserObject"
          },
          "status": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "invite_id": {
            "type": "string"
          },
          "retries": {
            "type": "integer"
          }
        }
      },
      "AssignLicenseRequestObject": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provisioningIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "externalReferenceId": {
            "type": "string",
            "description": "Optional external reference ID for the operation"
          },
          "customAttributes": {
            "type": "object",
            "description": "Optional customAttributes for the operation"
          }
        }
      },
      "AssignRevokeLicenseRequestObject": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "string",
            "enum": [
              "ASSIGN",
              "REVOKE"
            ]
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                }
              }
            }
          },
          "subscription": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ENTITLEMENT"
                ]
              },
              "id": {
                "type": "string"
              }
            }
          }
        }
      },
      "ArchiveTransactionsObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Role",
              "License"
            ]
          },
          "transactionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RevokeLicenseRequestObject": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provisioningIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SupportMiddlewareAssignLicenseRequestObject": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "provisioningIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "externalReferenceId": {
            "type": "string",
            "description": "Optional external reference ID for the operation"
          },
          "customAttributes": {
            "type": "object",
            "description": "Optional customAttributes for the operation"
          }
        }
      },
      "AssignLicenseResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "AssignRevokeLicenseResponseObject": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "entitlementId": {
            "type": "string"
          }
        }
      },
      "ArchiveTransactionsResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "archivedTransactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "failedTransactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LicenseStatusResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PENDING",
              "PROCESSING",
              "ERROR",
              "REMOVED"
            ]
          },
          "error": {
            "type": "string"
          }
        }
      },
      "MigrateArchivedSubscriptionRequestObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ALL"
            ]
          },
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MigrateArchivedSubscriptionResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "migratedAccounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "failedAccounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "migratedTransactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "failedTransactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RevokeLicenseResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "SingleUserAssignLicenseResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "isAssigned": {
            "type": "boolean",
            "default": false
          },
          "totalLicenses": {
            "type": "integer"
          },
          "assignedLicenses": {
            "type": "integer"
          },
          "availableLicenses": {
            "type": "integer"
          },
          "retries": {
            "type": "integer"
          },
          "provisioningIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provisioningSystem": {
            "type": "string",
            "enum": [
              "EMSv4",
              "LEGACY",
              "MANUAL"
            ]
          },
          "actionType": {
            "type": "string",
            "enum": [
              "Assign",
              "Revoke",
              "Transfer"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PENDING",
              "PROCESSING",
              "EXPIRED",
              "ERROR"
            ]
          }
        }
      },
      "InvoiceObject": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "string"
          },
          "invoiceNumber": {
            "type": "string"
          },
          "createdDate": {
            "type": "string"
          },
          "dueDate": {
            "type": "string"
          },
          "totalAmount": {
            "type": "string"
          },
          "balanceRemaining": {
            "type": "string"
          },
          "currencyIsoCode": {
            "type": "string"
          },
          "hasDownloadUrl": {
            "type": "boolean",
            "default": false
          },
          "sourceSystem": {
            "enum": [
              "DVW",
              "DVR"
            ]
          }
        }
      },
      "SignFieldsRequestObject": {
        "type": "object",
        "properties": {
          "BillingCountry": {
            "type": "string"
          },
          "FieldsToBeSigned": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SignFieldsResponseObject": {
        "type": "object",
        "properties": {
          "SignedFields": {
            "type": "string"
          }
        }
      },
      "PaypalInitResponseObject": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "PaypalSaveRequestObject": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "LegalEntityResponseObject": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "paymentMethods": {
            "type": "object",
            "properties": {
              "card": {
                "type": "object",
                "properties": {
                  "profileId": {
                    "type": "string"
                  },
                  "accessKey": {
                    "type": "string"
                  },
                  "availableCardTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "collectionGroupName": {
                    "type": "string"
                  }
                }
              },
              "paypal": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "collectionGroupName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "InvoiceTemplateData": {
        "type": "object",
        "properties": {
          "subTotal": {
            "type": "string"
          },
          "taxes": {
            "type": "string"
          },
          "total": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "currencySymbol": {
            "type": "string"
          },
          "trimbleName": {
            "type": "string"
          },
          "trimbleAddress": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "invoiceDate": {
            "type": "string"
          },
          "invoiceNumber": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "currencyName": {
            "type": "string"
          },
          "billToAddress": {
            "type": "string"
          },
          "planDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "partNumber": {
                  "type": "string"
                },
                "productName": {
                  "type": "string"
                },
                "quantity": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string"
                },
                "endDate": {
                  "type": "string"
                },
                "price": {
                  "type": "string"
                },
                "vat": {
                  "type": "string"
                },
                "totalPrice": {
                  "type": "string"
                }
              }
            }
          },
          "payment": {
            "type": "string"
          },
          "balanceDue": {
            "type": "string"
          },
          "vatId": {
            "type": "string"
          }
        }
      },
      "UserLicenseObject": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaymentsResponseObject": {
        "type": "object",
        "properties": {
          "paymentType": {
            "enum": [
              "Card",
              "PayPal",
              "ACH"
            ],
            "type": "string"
          },
          "collectionFailed": {
            "type": "boolean"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardPaymentMethodResponseObject"
              },
              {
                "$ref": "#/components/schemas/PaypalPaymentMethodResponseObject"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PaypalPaymentMethodResponseObject": {
        "type": "object",
        "properties": {
          "paypalID": {
            "type": "string",
            "nullable": true
          },
          "paypalUserName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardPaymentMethodResponseObject": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "lastFourDigits": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "nullable": true
          },
          "cardType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderResponseObject": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateOrderRequest": {
        "type": "object",
        "properties": {
          "userConsent": {
            "type": "boolean"
          },
          "assignLicenseForLineItems": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "GetOrdersByAccountIdResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "ariaAccountNo": {
            "type": "string"
          },
          "authorizationId": {
            "type": "string"
          },
          "ctOrderId": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "dxOrderStatus": {
            "type": "integer"
          },
          "invoiceNo": {
            "type": "string"
          },
          "lastModified": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "integer"
          },
          "source": {
            "type": "integer"
          },
          "status": {
            "type": "integer"
          },
          "uuid": {
            "type": "string"
          },
          "orderLineItems": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "accountId": {
                "type": "string"
              },
              "assetId": {
                "type": "string"
              },
              "assignLicenseToMe": {
                "type": "boolean"
              },
              "created": {
                "type": "string"
              },
              "ctOrderLineitemId": {
                "type": "string"
              },
              "currentEntitlementId": {
                "type": "string"
              },
              "entitilementEndDate": {
                "type": "string"
              },
              "entitlementJobId": {
                "type": "string"
              },
              "entitlementStartDate": {
                "type": "string"
              },
              "lastModified": {
                "type": "string"
              },
              "licenseId": {
                "type": "string"
              },
              "newEntitlementId": {
                "type": "string"
              },
              "oldQuantity": {
                "type": "string"
              },
              "oldSku": {
                "type": "string"
              },
              "orderId": {
                "type": "string"
              },
              "planInstanceId": {
                "type": "string"
              },
              "quantity": {
                "type": "integer"
              },
              "sku": {
                "type": "string"
              },
              "status": {
                "type": "integer"
              },
              "subscriptionType": {
                "type": "integer"
              },
              "type": {
                "type": "integer"
              },
              "unitprice": {
                "type": "number"
              }
            }
          }
        }
      },
      "GetStagedOrdersResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "accountID": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "enum": [
              "AXP",
              "MXP",
              "ARIA"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "NEW_PURCHASE",
              "SUBSEQUENT_PURCHASE",
              "ADD_SEATS",
              "REMOVE_SEATS",
              "FULL_UPGRADE",
              "FULL_DOWNGRADE",
              "CANCEL_SEATS",
              "RENEWAL"
            ]
          },
          "sku": {
            "type": "string"
          },
          "licenseIdsToRemove": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "emailIdsToRemove": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "quantityToRemove": {
            "type": "integer"
          },
          "entitlementId": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "planInstanceId": {
            "type": "integer"
          },
          "toDowngradeSku": {
            "type": "integer"
          },
          "feedback": {
            "type": "integer"
          },
          "entitlementEndDate": {
            "type": "string"
          }
        }
      },
      "GetOrderDbStatusByEntitlementIdResponseObject": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string"
          },
          "Sku": {
            "type": "string"
          },
          "Quantity": {
            "type": "string"
          },
          "OrderLineItemType": {
            "type": "string",
            "enum": [
              "NEW_PURCHASE",
              "SUBSEQUENT_PURCHASE",
              "ADD_SEATS",
              "REMOVE_SEATS",
              "FULL_UPGRADE",
              "FULL_DOWNGRADE",
              "CANCEL_SEATS",
              "RENEWAL"
            ]
          },
          "Date": {
            "type": "string"
          },
          "OrderDbStatus": {
            "type": "string",
            "enum": [
              "PROCESSING",
              "SUCCESS",
              "FAILURE",
              "SCHEDULED"
            ]
          },
          "FailureType": {
            "type": "string",
            "enum": [
              "NONE",
              "SALESFORCE_UPDATE_FAILED",
              "ORDER_PROCESSING_FAILED",
              "DUNNING",
              "NOT_PAID",
              "HOLD",
              "DCOUNTRYHOLD"
            ]
          }
        }
      },
      "GetOrderHistoryResponseObject": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "status": {
            "enum": [
              "Processing",
              "Complete",
              "OnHold"
            ],
            "type": "string"
          },
          "orderDate": {
            "type": "string"
          },
          "totalAmount": {
            "type": "string"
          },
          "hasDownloadUrl": {
            "type": "boolean"
          },
          "currencyIsoCode": {
            "type": "string"
          },
          "sourceSystem": {
            "enum": [
              "DVW",
              "DVR"
            ],
            "type": "string"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ErrorDetails": {
        "type": "object",
        "properties": {
          "errorCode": {
            "enum": [
              "PAYMENTS_9999",
              "PAYMENTS_1000",
              "PAYMENTS_1001",
              "PAYMENTS_1002",
              "PAYMENTS_1003",
              "PAYMENTS_1004",
              "PAYMENTS_1005",
              "PAYMENTS_1006",
              "PAYMENTS_1007",
              "PAYMENTS_1008"
            ],
            "type": "string"
          },
          "errorDescription": {
            "type": "string",
            "nullable": true
          },
          "errorData": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvitationWebhookRequestObject": {
        "type": "object",
        "properties": {
          "invitation_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "invite_email_address": {
            "type": "string"
          },
          "webhook_secret_token": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "InvitationWebhookResponseObject": {
        "type": "object",
        "properties": {
          "redirect_url": {
            "type": "string"
          }
        }
      },
      "UserLicenseStatusCheckResponseObject": {
        "type": "object",
        "properties": {
          "hasActiveSubscription": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if the user has an active subscription or not"
          }
        }
      },
      "CartMergeObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "totalNet": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalLineItemQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "totalTax": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalGross": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemWithThreshold"
            },
            "nullable": true
          },
          "mergeWarning": {
            "$ref": "#/components/schemas/MergeWarnings"
          }
        },
        "additionalProperties": false
      },
      "LineItemWithThreshold": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/PriceObject"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "format": "int64"
          },
          "isThresholdExceed": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MergeWarnings": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "enum": [
                "NONE",
                "CURRENCY_MISMATCH",
                "THRESHOLD_EXCEED",
                "REMOVED_SKU"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "ProvisioningDetailsObject": {
        "type": "object",
        "properties": {
          "provisioningSystem": {
            "type": "string"
          },
          "isProvisioningAvailable": {
            "type": "boolean"
          }
        }
      },
      "ActivateContractRequestObject": {
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "termsType": {
            "type": "string"
          }
        }
      },
      "ActivateContractResponseObject": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "GetUnactivatedContractsResponse": {
        "type": "object",
        "properties": {
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractDto"
            }
          }
        }
      },
      "ContractDto": {
        "type": "object",
        "properties": {
          "activationStatus": {
            "type": "string"
          },
          "autoActivationDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "provisioningStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "autoRenew": {
            "type": "boolean"
          },
          "dealer": {
            "type": "object",
            "properties": {
              "corporationName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "fullName": {
                "type": "string"
              }
            }
          },
          "dxpContractId": {
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "sku": {
                  "type": "string"
                },
                "totalLicenses": {
                  "type": "integer"
                },
                "entitlementId": {
                  "type": "string"
                },
                "provisioningStatus": {
                  "type": "string"
                },
                "provisioningMethod": {
                  "type": "string"
                }
              }
            }
          },
          "termEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "termLengthMonths": {
            "type": "integer"
          },
          "termsOfServiceAcceptance": {
            "type": "object",
            "nullable": true,
            "properties": {
              "dateTime": {
                "type": "string",
                "format": "date-time"
              },
              "version": {
                "type": "string"
              },
              "userTidUUID": {
                "type": "string"
              }
            }
          },
          "orderNumber": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          }
        }
      },
      "GetTermsOfServiceResponse": {
        "type": "object",
        "properties": {
          "termsType": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}